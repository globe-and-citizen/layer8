// Code generated by MockGen. DO NOT EDIT.
// Source: server/blockchain/wrapper.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	blockchain "globe-and-citizen/layer8/server/blockchain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPayAsYouGoWrapper is a mock of PayAsYouGoWrapper interface.
type MockPayAsYouGoWrapper struct {
	ctrl     *gomock.Controller
	recorder *MockPayAsYouGoWrapperMockRecorder
}

// MockPayAsYouGoWrapperMockRecorder is the mock recorder for MockPayAsYouGoWrapper.
type MockPayAsYouGoWrapperMockRecorder struct {
	mock *MockPayAsYouGoWrapper
}

// NewMockPayAsYouGoWrapper creates a new mock instance.
func NewMockPayAsYouGoWrapper(ctrl *gomock.Controller) *MockPayAsYouGoWrapper {
	mock := &MockPayAsYouGoWrapper{ctrl: ctrl}
	mock.recorder = &MockPayAsYouGoWrapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPayAsYouGoWrapper) EXPECT() *MockPayAsYouGoWrapperMockRecorder {
	return m.recorder
}

// BulkAddBillToClient mocks base method.
func (m *MockPayAsYouGoWrapper) BulkAddBillToClient(ctx context.Context, billings []blockchain.PayAsYouGoBillingInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkAddBillToClient", ctx, billings)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkAddBillToClient indicates an expected call of BulkAddBillToClient.
func (mr *MockPayAsYouGoWrapperMockRecorder) BulkAddBillToClient(ctx, billings interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkAddBillToClient", reflect.TypeOf((*MockPayAsYouGoWrapper)(nil).BulkAddBillToClient), ctx, billings)
}

// GetClientByID mocks base method.
func (m *MockPayAsYouGoWrapper) GetClientByID(ctx context.Context, clientID string) (blockchain.PayAsYouGoClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientByID", ctx, clientID)
	ret0, _ := ret[0].(blockchain.PayAsYouGoClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientByID indicates an expected call of GetClientByID.
func (mr *MockPayAsYouGoWrapperMockRecorder) GetClientByID(ctx, clientID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientByID", reflect.TypeOf((*MockPayAsYouGoWrapper)(nil).GetClientByID), ctx, clientID)
}

// GetClients mocks base method.
func (m *MockPayAsYouGoWrapper) GetClients(ctx context.Context) ([]blockchain.PayAsYouGoClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClients", ctx)
	ret0, _ := ret[0].([]blockchain.PayAsYouGoClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClients indicates an expected call of GetClients.
func (mr *MockPayAsYouGoWrapperMockRecorder) GetClients(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClients", reflect.TypeOf((*MockPayAsYouGoWrapper)(nil).GetClients), ctx)
}

// StoreClient mocks base method.
func (m *MockPayAsYouGoWrapper) StoreClient(ctx context.Context, rate uint64, clientId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreClient", ctx, rate, clientId)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreClient indicates an expected call of StoreClient.
func (mr *MockPayAsYouGoWrapperMockRecorder) StoreClient(ctx, rate, clientId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreClient", reflect.TypeOf((*MockPayAsYouGoWrapper)(nil).StoreClient), ctx, rate, clientId)
}
