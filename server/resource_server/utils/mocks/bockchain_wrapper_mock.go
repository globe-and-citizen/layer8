// Code generated by MockGen. DO NOT EDIT.
// Source: server/blockchain/wrapper.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	blockchain "globe-and-citizen/layer8/server/blockchain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPayAsYouGoWrapper is a mock of PayAsYouGoWrapper interface.
type MockPayAsYouGoWrapper struct {
	ctrl     *gomock.Controller
	recorder *MockPayAsYouGoWrapperMockRecorder
}

// MockPayAsYouGoWrapperMockRecorder is the mock recorder for MockPayAsYouGoWrapper.
type MockPayAsYouGoWrapperMockRecorder struct {
	mock *MockPayAsYouGoWrapper
}

// NewMockPayAsYouGoWrapper creates a new mock instance.
func NewMockPayAsYouGoWrapper(ctrl *gomock.Controller) *MockPayAsYouGoWrapper {
	mock := &MockPayAsYouGoWrapper{ctrl: ctrl}
	mock.recorder = &MockPayAsYouGoWrapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPayAsYouGoWrapper) EXPECT() *MockPayAsYouGoWrapperMockRecorder {
	return m.recorder
}

// CreateContract mocks base method.
func (m *MockPayAsYouGoWrapper) CreateContract(ctx context.Context, rate uint8, clientId string) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContract", ctx, rate, clientId)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateContract indicates an expected call of CreateContract.
func (mr *MockPayAsYouGoWrapperMockRecorder) CreateContract(ctx, rate, clientId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContract", reflect.TypeOf((*MockPayAsYouGoWrapper)(nil).CreateContract), ctx, rate, clientId)
}

// GetContractByID mocks base method.
func (m *MockPayAsYouGoWrapper) GetContractByID(ctx context.Context, contractID string) (blockchain.PayAsYouGoAgreement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractByID", ctx, contractID)
	ret0, _ := ret[0].(blockchain.PayAsYouGoAgreement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContractByID indicates an expected call of GetContractByID.
func (mr *MockPayAsYouGoWrapperMockRecorder) GetContractByID(ctx, contractID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractByID", reflect.TypeOf((*MockPayAsYouGoWrapper)(nil).GetContractByID), ctx, contractID)
}
