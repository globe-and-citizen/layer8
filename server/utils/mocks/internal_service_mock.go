// Code generated by MockGen. DO NOT EDIT.
// Source: server/internals/service/service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	entities "globe-and-citizen/layer8/server/entities"
	models "globe-and-citizen/layer8/server/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	oauth2 "golang.org/x/oauth2"
)

// MockServiceInterface is a mock of ServiceInterface interface.
type MockServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockServiceInterfaceMockRecorder
}

// MockServiceInterfaceMockRecorder is the mock recorder for MockServiceInterface.
type MockServiceInterfaceMockRecorder struct {
	mock *MockServiceInterface
}

// NewMockServiceInterface creates a new mock instance.
func NewMockServiceInterface(ctrl *gomock.Controller) *MockServiceInterface {
	mock := &MockServiceInterface{ctrl: ctrl}
	mock.recorder = &MockServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceInterface) EXPECT() *MockServiceInterfaceMockRecorder {
	return m.recorder
}

// AccessResourcesWithToken mocks base method.
func (m *MockServiceInterface) AccessResourcesWithToken(token string) (map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccessResourcesWithToken", token)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccessResourcesWithToken indicates an expected call of AccessResourcesWithToken.
func (mr *MockServiceInterfaceMockRecorder) AccessResourcesWithToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccessResourcesWithToken", reflect.TypeOf((*MockServiceInterface)(nil).AccessResourcesWithToken), token)
}

// AddTestClient mocks base method.
func (m *MockServiceInterface) AddTestClient() (*models.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTestClient")
	ret0, _ := ret[0].(*models.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTestClient indicates an expected call of AddTestClient.
func (mr *MockServiceInterfaceMockRecorder) AddTestClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTestClient", reflect.TypeOf((*MockServiceInterface)(nil).AddTestClient))
}

// AuthenticateClient mocks base method.
func (m *MockServiceInterface) AuthenticateClient(uuid, secret string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthenticateClient", uuid, secret)
	ret0, _ := ret[0].(error)
	return ret0
}

// AuthenticateClient indicates an expected call of AuthenticateClient.
func (mr *MockServiceInterfaceMockRecorder) AuthenticateClient(uuid, secret interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthenticateClient", reflect.TypeOf((*MockServiceInterface)(nil).AuthenticateClient), uuid, secret)
}

// CheckClient mocks base method.
func (m *MockServiceInterface) CheckClient(backendURL string) (*models.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckClient", backendURL)
	ret0, _ := ret[0].(*models.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckClient indicates an expected call of CheckClient.
func (mr *MockServiceInterfaceMockRecorder) CheckClient(backendURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckClient", reflect.TypeOf((*MockServiceInterface)(nil).CheckClient), backendURL)
}

// ExchangeCodeForToken mocks base method.
func (m *MockServiceInterface) ExchangeCodeForToken(config *oauth2.Config, code string) (*oauth2.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExchangeCodeForToken", config, code)
	ret0, _ := ret[0].(*oauth2.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExchangeCodeForToken indicates an expected call of ExchangeCodeForToken.
func (mr *MockServiceInterfaceMockRecorder) ExchangeCodeForToken(config, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExchangeCodeForToken", reflect.TypeOf((*MockServiceInterface)(nil).ExchangeCodeForToken), config, code)
}

// GenerateAccessToken mocks base method.
func (m *MockServiceInterface) GenerateAccessToken(userId int64, clientID, clientSecret string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateAccessToken", userId, clientID, clientSecret)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateAccessToken indicates an expected call of GenerateAccessToken.
func (mr *MockServiceInterfaceMockRecorder) GenerateAccessToken(userId, clientID, clientSecret interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateAccessToken", reflect.TypeOf((*MockServiceInterface)(nil).GenerateAccessToken), userId, clientID, clientSecret)
}

// GenerateAuthJwtCode mocks base method.
func (m *MockServiceInterface) GenerateAuthJwtCode(config *oauth2.Config, userID int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateAuthJwtCode", config, userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateAuthJwtCode indicates an expected call of GenerateAuthJwtCode.
func (mr *MockServiceInterfaceMockRecorder) GenerateAuthJwtCode(config, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateAuthJwtCode", reflect.TypeOf((*MockServiceInterface)(nil).GenerateAuthJwtCode), config, userID)
}

// GenerateAuthorizationURL mocks base method.
func (m *MockServiceInterface) GenerateAuthorizationURL(config *oauth2.Config, userID int64) (*entities.AuthURL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateAuthorizationURL", config, userID)
	ret0, _ := ret[0].(*entities.AuthURL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateAuthorizationURL indicates an expected call of GenerateAuthorizationURL.
func (mr *MockServiceInterfaceMockRecorder) GenerateAuthorizationURL(config, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateAuthorizationURL", reflect.TypeOf((*MockServiceInterface)(nil).GenerateAuthorizationURL), config, userID)
}

// GetClient mocks base method.
func (m *MockServiceInterface) GetClient(id string) (*models.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClient", id)
	ret0, _ := ret[0].(*models.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClient indicates an expected call of GetClient.
func (mr *MockServiceInterfaceMockRecorder) GetClient(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClient", reflect.TypeOf((*MockServiceInterface)(nil).GetClient), id)
}

// GetUserByToken mocks base method.
func (m *MockServiceInterface) GetUserByToken(token string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByToken", token)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByToken indicates an expected call of GetUserByToken.
func (mr *MockServiceInterfaceMockRecorder) GetUserByToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByToken", reflect.TypeOf((*MockServiceInterface)(nil).GetUserByToken), token)
}

// GetZkUserMetadata mocks base method.
func (m *MockServiceInterface) GetZkUserMetadata(scopesStr string, userID int64) (*entities.ZkMetadataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetZkUserMetadata", scopesStr, userID)
	ret0, _ := ret[0].(*entities.ZkMetadataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetZkUserMetadata indicates an expected call of GetZkUserMetadata.
func (mr *MockServiceInterfaceMockRecorder) GetZkUserMetadata(scopesStr, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetZkUserMetadata", reflect.TypeOf((*MockServiceInterface)(nil).GetZkUserMetadata), scopesStr, userID)
}

// LoginUser mocks base method.
func (m *MockServiceInterface) LoginUser(username, password string) (map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginUser", username, password)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginUser indicates an expected call of LoginUser.
func (mr *MockServiceInterfaceMockRecorder) LoginUser(username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginUser", reflect.TypeOf((*MockServiceInterface)(nil).LoginUser), username, password)
}

// SaveX509Certificate mocks base method.
func (m *MockServiceInterface) SaveX509Certificate(clientID, certificate string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveX509Certificate", clientID, certificate)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveX509Certificate indicates an expected call of SaveX509Certificate.
func (mr *MockServiceInterfaceMockRecorder) SaveX509Certificate(clientID, certificate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveX509Certificate", reflect.TypeOf((*MockServiceInterface)(nil).SaveX509Certificate), clientID, certificate)
}

// ValidateAccessToken mocks base method.
func (m *MockServiceInterface) ValidateAccessToken(clientSecret, accessToken string) (*entities.ClientClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateAccessToken", clientSecret, accessToken)
	ret0, _ := ret[0].(*entities.ClientClaims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateAccessToken indicates an expected call of ValidateAccessToken.
func (mr *MockServiceInterfaceMockRecorder) ValidateAccessToken(clientSecret, accessToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateAccessToken", reflect.TypeOf((*MockServiceInterface)(nil).ValidateAccessToken), clientSecret, accessToken)
}

// VerifyAuthorizationCode mocks base method.
func (m *MockServiceInterface) VerifyAuthorizationCode(secret, code string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyAuthorizationCode", secret, code)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyAuthorizationCode indicates an expected call of VerifyAuthorizationCode.
func (mr *MockServiceInterfaceMockRecorder) VerifyAuthorizationCode(secret, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyAuthorizationCode", reflect.TypeOf((*MockServiceInterface)(nil).VerifyAuthorizationCode), secret, code)
}

// VerifyToken mocks base method.
func (m *MockServiceInterface) VerifyToken(token string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyToken", token)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyToken indicates an expected call of VerifyToken.
func (mr *MockServiceInterfaceMockRecorder) VerifyToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyToken", reflect.TypeOf((*MockServiceInterface)(nil).VerifyToken), token)
}
