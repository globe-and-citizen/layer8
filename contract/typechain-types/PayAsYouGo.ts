/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace PayAsYouGo {
  export type BillingInputStruct = {
    clientId: string;
    amount: BigNumberish;
    timestamp: BigNumberish;
  };

  export type BillingInputStructOutput = [
    clientId: string,
    amount: bigint,
    timestamp: bigint
  ] & { clientId: string; amount: bigint; timestamp: bigint };

  export type TransactionStruct = {
    amount: BigNumberish;
    timestamp: BigNumberish;
    transactionType: BigNumberish;
  };

  export type TransactionStructOutput = [
    amount: bigint,
    timestamp: bigint,
    transactionType: bigint
  ] & { amount: bigint; timestamp: bigint; transactionType: bigint };

  export type ClientStruct = {
    clientId: string;
    unpaidBill: BigNumberish;
    lastUsageFetchTime: BigNumberish;
    rate: BigNumberish;
    transactions: PayAsYouGo.TransactionStruct[];
  };

  export type ClientStructOutput = [
    clientId: string,
    unpaidBill: bigint,
    lastUsageFetchTime: bigint,
    rate: bigint,
    transactions: PayAsYouGo.TransactionStructOutput[]
  ] & {
    clientId: string;
    unpaidBill: bigint;
    lastUsageFetchTime: bigint;
    rate: bigint;
    transactions: PayAsYouGo.TransactionStructOutput[];
  };
}

export interface PayAsYouGoInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addBillToClient"
      | "bulkAddBillToClient"
      | "changeAllClientRates"
      | "changeRate"
      | "changeTransactionAddress"
      | "clientIDs"
      | "clients"
      | "getClientById"
      | "getClients"
      | "newClient"
      | "payBill"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "BillAdded" | "BillPaid" | "ClientCreated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addBillToClient",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkAddBillToClient",
    values: [PayAsYouGo.BillingInputStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "changeAllClientRates",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeRate",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeTransactionAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "clientIDs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "clients", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getClientById",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getClients",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "newClient",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "payBill", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "addBillToClient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bulkAddBillToClient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeAllClientRates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "changeRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeTransactionAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "clientIDs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "clients", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getClientById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getClients", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "newClient", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payBill", data: BytesLike): Result;
}

export namespace BillAddedEvent {
  export type InputTuple = [clientId: string, amount: BigNumberish];
  export type OutputTuple = [clientId: string, amount: bigint];
  export interface OutputObject {
    clientId: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BillPaidEvent {
  export type InputTuple = [clientId: string, amount: BigNumberish];
  export type OutputTuple = [clientId: string, amount: bigint];
  export interface OutputObject {
    clientId: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClientCreatedEvent {
  export type InputTuple = [clientId: string];
  export type OutputTuple = [clientId: string];
  export interface OutputObject {
    clientId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PayAsYouGo extends BaseContract {
  connect(runner?: ContractRunner | null): PayAsYouGo;
  waitForDeployment(): Promise<this>;

  interface: PayAsYouGoInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addBillToClient: TypedContractMethod<
    [clientId: string, amount: BigNumberish, timestamp: BigNumberish],
    [void],
    "nonpayable"
  >;

  bulkAddBillToClient: TypedContractMethod<
    [billings: PayAsYouGo.BillingInputStruct[]],
    [void],
    "nonpayable"
  >;

  changeAllClientRates: TypedContractMethod<
    [rate: BigNumberish],
    [void],
    "nonpayable"
  >;

  changeRate: TypedContractMethod<
    [clientId: string, rate: BigNumberish],
    [void],
    "nonpayable"
  >;

  changeTransactionAddress: TypedContractMethod<
    [_transactionAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  clientIDs: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  clients: TypedContractMethod<
    [arg0: string],
    [
      [string, bigint, bigint, bigint] & {
        clientId: string;
        unpaidBill: bigint;
        lastUsageFetchTime: bigint;
        rate: bigint;
      }
    ],
    "view"
  >;

  getClientById: TypedContractMethod<
    [clientId: string],
    [PayAsYouGo.ClientStructOutput],
    "view"
  >;

  getClients: TypedContractMethod<
    [],
    [PayAsYouGo.ClientStructOutput[]],
    "view"
  >;

  newClient: TypedContractMethod<
    [rate: BigNumberish, clientId: string],
    [void],
    "nonpayable"
  >;

  payBill: TypedContractMethod<[clientId: string], [void], "payable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addBillToClient"
  ): TypedContractMethod<
    [clientId: string, amount: BigNumberish, timestamp: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "bulkAddBillToClient"
  ): TypedContractMethod<
    [billings: PayAsYouGo.BillingInputStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "changeAllClientRates"
  ): TypedContractMethod<[rate: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "changeRate"
  ): TypedContractMethod<
    [clientId: string, rate: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "changeTransactionAddress"
  ): TypedContractMethod<
    [_transactionAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "clientIDs"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "clients"
  ): TypedContractMethod<
    [arg0: string],
    [
      [string, bigint, bigint, bigint] & {
        clientId: string;
        unpaidBill: bigint;
        lastUsageFetchTime: bigint;
        rate: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getClientById"
  ): TypedContractMethod<
    [clientId: string],
    [PayAsYouGo.ClientStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getClients"
  ): TypedContractMethod<[], [PayAsYouGo.ClientStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "newClient"
  ): TypedContractMethod<
    [rate: BigNumberish, clientId: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "payBill"
  ): TypedContractMethod<[clientId: string], [void], "payable">;

  getEvent(
    key: "BillAdded"
  ): TypedContractEvent<
    BillAddedEvent.InputTuple,
    BillAddedEvent.OutputTuple,
    BillAddedEvent.OutputObject
  >;
  getEvent(
    key: "BillPaid"
  ): TypedContractEvent<
    BillPaidEvent.InputTuple,
    BillPaidEvent.OutputTuple,
    BillPaidEvent.OutputObject
  >;
  getEvent(
    key: "ClientCreated"
  ): TypedContractEvent<
    ClientCreatedEvent.InputTuple,
    ClientCreatedEvent.OutputTuple,
    ClientCreatedEvent.OutputObject
  >;

  filters: {
    "BillAdded(string,uint256)": TypedContractEvent<
      BillAddedEvent.InputTuple,
      BillAddedEvent.OutputTuple,
      BillAddedEvent.OutputObject
    >;
    BillAdded: TypedContractEvent<
      BillAddedEvent.InputTuple,
      BillAddedEvent.OutputTuple,
      BillAddedEvent.OutputObject
    >;

    "BillPaid(string,uint256)": TypedContractEvent<
      BillPaidEvent.InputTuple,
      BillPaidEvent.OutputTuple,
      BillPaidEvent.OutputObject
    >;
    BillPaid: TypedContractEvent<
      BillPaidEvent.InputTuple,
      BillPaidEvent.OutputTuple,
      BillPaidEvent.OutputObject
    >;

    "ClientCreated(string)": TypedContractEvent<
      ClientCreatedEvent.InputTuple,
      ClientCreatedEvent.OutputTuple,
      ClientCreatedEvent.OutputObject
    >;
    ClientCreated: TypedContractEvent<
      ClientCreatedEvent.InputTuple,
      ClientCreatedEvent.OutputTuple,
      ClientCreatedEvent.OutputObject
    >;
  };
}
